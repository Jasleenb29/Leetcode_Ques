/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void inorder(TreeNode* root,vector<int> &v)
    {
        if(!root)
            return;
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> v;
        inorder(root,v);
        TreeNode* ans= new TreeNode(0);
        TreeNode* curr=ans;
        
        
        //accessing the vector , creating the node having value as present in 
        //index of vector. Just like LL, taking 2 pointer of type TreeNode
        //ans starting from random number, and curr is used to iterate the tree.
        for(int t: v)
        {
            curr->right=new TreeNode(t);
            curr=curr->right;
        }
        
        return ans->right;
    }
};
