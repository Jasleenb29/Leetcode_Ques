class Solution {
public:
    int bitcount(int n)
    {
        int count=0;
        while(n>0)
        {
            count++;
            n=n&(n-1);
        }
        return count;
    }
    vector<int> sortByBits(vector<int>& arr) {
        vector<pair<int,int>> p;
        vector<int> ans;
        for(int i=0;i<arr.size();i++)
        {
            p.push_back(make_pair(bitcount(arr[i]),arr[i]));
        }
        sort(p.begin(),p.end());
        for(int i=0;i<p.size();i++)
        {
            ans.push_back(p[i].second);
        }
        return ans;
       
    }
};
/*
APPROACH:
1. used sort function along with the comparator.
2. In comparator, declare the fasion in which we want to compare two objects.
3. __builtin_popcount(a) is used to find the set bits(number of 1's) in a(decimal number)
4.stable is used in front of sort to make sure if 2 numbers are equal after sorting so the number
which will appear first in array/vector will be first in the ans vector also.
*/
